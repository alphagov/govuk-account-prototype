
/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"names":[],"mappings":"","sources":["explore-header.scss"],"sourcesContent":["@import \"media-queries\";\n@import \"sass-mq\";\n@import \"colour\";\n@import \"xpl-link-styles\";\n\n\n$govuk-link-colour: govuk-colour(\"blue\") !default;\n$govuk-border-colour: govuk-colour(\"mid-grey\");\n$link-hover-colour: #003078;\n$menu-hover-colour: #005ff8;\n\n$govuk-link-underline-thickness: 0.0625rem !default;\n$govuk-heavy-link-underline-thickness: 3px;\n$govuk-link-hover-underline-thickness: unquote(\"max(.1875rem, .12em)\") !default;\n$govuk-link-underline-offset: 0.15em !default;\n$govuk-text-colour: govuk-colour(\"black\") !default;\n\n$mobile-width: 360px;\n$tablet-width: 740px;\n$desktop-width: 768px;\n$wide-width: 1300px;\n$font: \"GDS Transport\", nta, Arial, sans-serif;\n\n/*! Copyright (c) 2011 by Margaret Calvert & Henrik Kubel. All rights reserved. The font has been customised for exclusive use on gov.uk. This cut is not commercially available. */\n/* stylelint-disable-line scss/comment-no-loud  */\n@font-face {\n  font-family: \"GDS Transport\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"/govuk/assets/fonts/light-94a07e06a1-v2.woff2\") format(\"woff2\"), url(\"/govuk/assets/fonts/light-f591b13f7d-v2.woff\") format(\"woff\");\n  font-display: fallback;\n}\n\n@font-face {\n  font-family: \"GDS Transport\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"/govuk/assets/fonts/bold-b542beb274-v2.woff2\") format(\"woff2\"), url(\"/govuk/assets/fonts/bold-affa96571d-v2.woff\") format(\"woff\");\n  font-display: fallback;\n}\n\n@media print {\n  .govuk-link, a, .app-step-nav-header__title, .app-step-nav-related__link {\n    font-family: sans-serif;\n  }\n}\n\n//---- menu ----\n.explore-header {\n  border-bottom: 0;\n\n  button { font-family: inherit; }\n\n  a:link, a:visited {\n    text-decoration: none;\n  }\n\n  &.govuk-header {\n    padding-top: 0;\n  }\n\n  .govuk-header__logotype {\n    height: 30px;\n    vertical-align: top;\n  }\n\n  .govuk-header__logo {\n    margin-bottom: 0;\n    padding-bottom: 12px;\n    padding-top: 3px;\n  }\n\n  .govuk-header__container {\n    border-bottom: none;\n    padding: 10px 25px 0 25px;\n    margin-left: 0;\n    margin-right: 0;\n    &--old-page {\n      padding: 10px 15px 0 15px;\n    }\n  }\n\n  .govuk-header__link--homepage {\n    height: 30px;\n    font-family: $font;\n  }\n\n  .govuk-header__logo {\n    a {\n      text-decoration: underline;\n      &:hover,\n      &:active {\n        border-bottom: 3px solid;\n        margin-bottom: -3px;\n      }\n    }\n  }\n\n  .govuk-header__content {\n    padding: 0;\n  }\n\n  #xpl-topics-button {\n    padding-left: 0;\n  }\n\n  .xpl-nav--desktop {\n    display: block;\n    background: govuk-colour(\"black\");\n    border-top: 1px solid #6f6e70;\n    a:link {\n      color: govuk-colour(\"white\");\n    }\n  }\n\n  .xpl-frame2 ul {\n    list-style-type: none;\n    padding: 0;\n    li {\n      margin-bottom: 40px;\n      a:link, a:visited {\n        font-weight: bold;\n        font-size: 18px;\n        margin-bottom: 5px;\n        display: inline-block;\n      }\n\n      a:hover {\n        margin-bottom: 3px;\n      }\n    }\n  }\n\n  .govuk-header__navigation, #xpl-search-box {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 960px;\n  }\n\n  .xpl-menu__button {\n    font-family: \"GDS Transport\", nta, Arial, sans-serif;\n    background: none;\n    border: 0;\n    padding: 0;\n    font-size: 22px;\n    font-weight: bold;\n    color: $govuk-link-colour;\n    display: block;\n  }\n\n  .govuk-header__navigation-item:hover {\n    button:focus {\n      border-bottom: 0;\n      margin-bottom: 0;\n    }\n  }\n\n  .xpl-menu__button-back {\n    border: 0;\n    background: none;\n    &::before {\n      content: \"< \";\n    }\n    font-size: 18px;\n    color: #8c8c8c;\n  }\n\n  #xpl-popup-search, #xpl-popup-menu {\n    margin: 0 -20px 0 -20px;\n    background: govuk-colour(\"white\");\n  }\n\n  #xpl-popup-search {\n    padding: 0 25px 0 25px;\n    height: 100vh;\n    h2 {\n      color: black;\n      margin-top: 0;\n      padding: 40px 0 0 0;\n      margin-bottom: 30px;\n      font-size: 22px;\n    }\n    ul.govuk-list {\n      font-size: 18px;\n      font-weight: bold;\n      color: $govuk-link-colour;\n    }\n    ul li {\n      margin-bottom: 30px;\n    }\n  }\n\n  .xpl-menu-search-input {\n    input {\n      height: 50px;\n      width: calc(100% - 50px);\n      font-size: 22px;\n    }\n    label {\n      font-size: 22px;\n      margin-bottom: 30px;\n    }\n    button {\n      vertical-align: top;\n      display: inline-block;\n      width: 50px;\n      height: 50px;\n      cursor: pointer;\n      background-image: url(\"/public/images/magnifying-glass.png\");\n      background-repeat: no-repeat;\n      background-position: 6px 6px;\n      background-size: 35px;\n      background-color: black;\n      text-indent: -5000px;\n      overflow: hidden;\n    }\n    .govuk-form-group {\n      margin-bottom: 40px;\n    }\n    .govuk-heading-l {\n      margin-bottom: 30px;\n    }\n  }\n\n  .xpl-accordion {\n    margin-bottom: 0;\n    border-bottom: 0;\n    &__controls {\n      display: none;\n    }\n    &__icon {\n      position: absolute;\n      top: 50%;\n      right: 15px;\n      width: 16px;\n      height: 16px;\n      margin-top: -8px;\n      background-image: url(\"/public/images/chevron-down.svg\");\n    }\n    &__section:hover, &__section-link:hover {\n      background: #f3f2f1;\n    }\n    &__section--expanded {\n      background: #f3f2f1;\n      .xpl-accordion__icon {\n        background-image: url(\"/public/images/chevron-up.svg\");\n      }\n      .xpl-accordion__section-content {\n        display: block;\n      }\n    }\n    &__section, &__section-link {\n      border-bottom: 1px solid $govuk-border-colour;\n    }\n    &__section-link {\n      h2 {\n        font-size: 22px;\n        font-weight: 700;\n        a:visited {\n          color: $govuk-link-colour;\n        }\n      }\n    }\n    &__section-heading {\n      margin: 0;\n      button {\n        color: $govuk-link-colour;\n      }\n    }\n    &__section-button {\n      margin-top: 0;\n      margin-bottom: 0;\n      margin-left: 0;\n      border-width: 0;\n      padding: 0;\n      background: none;\n      font-weight: bold;\n      font-size: 22px;\n      text-align: left;\n      cursor: pointer;\n      &:focus {\n        outline: 3px solid transparent;\n        color: #0b0c0c;\n        background-color: #ffdd00;\n        box-shadow: 0 -2px #ffdd00, 0 4px #0b0c0c;\n        text-decoration: none;\n      }\n    }\n    &__section-header {\n      position: relative;\n      margin-left: 25px;\n      margin-right: 25px;\n      padding-left: 0;\n      padding-right: 0;\n      padding-top: 30px;\n      padding-bottom: 30px;\n      border: 0;\n      cursor: pointer;\n      &:hover {\n        box-shadow: none;\n      }\n    }\n    &__section-content {\n      display: none;\n      margin-left: 30px;\n      margin-right: 30px;\n      padding-top: 0;\n      a:link, a:visited {\n        font-size: 18px;\n        font-weight: bold;\n        color: $govuk-link-colour;\n      }\n      a:focus {\n        color: govuk-colour(\"black\");\n      }\n      p {\n        padding-top: 3px;\n        margin-bottom: 0;\n      }\n      ul li {\n        padding-bottom: 30px;\n      }\n    }\n  }\n\n  // New link styles for menu in mobile view\n  .govuk-header__menu-button:hover {\n    text-decoration-thickness: $govuk-heavy-link-underline-thickness;\n  }\n\n  .xpl-accordion__section-heading {\n    button {\n      border-bottom: $govuk-link-underline-thickness solid;\n\n      &:hover {\n        margin-bottom: $govuk-heavy-link-underline-thickness * -0.5;\n        border-bottom: $govuk-heavy-link-underline-thickness solid;\n      }\n\n      &:focus {\n        margin-bottom: 0;\n        border-bottom: 0;\n      }\n    }\n\n    a {\n      text-decoration: underline;\n      text-decoration-thickness: $govuk-link-underline-thickness;\n\n      &:hover {\n        text-decoration-thickness: 3px;\n      }\n    }\n  }\n\n  .xpl-accordion__section-content {\n    a {\n      text-decoration: underline;\n      text-decoration-thickness: $govuk-link-underline-thickness;\n\n      &:hover {\n        text-decoration-thickness: 3px;\n      }\n    }\n  }\n\n\n  #xpl-popup-menu {\n    #navigation {\n      height: 100vh;\n      .xpl-below-accordion li.govuk-header__navigation-item.xpl-minor-nav-item {\n        margin-left: 5px;\n        margin-right: 5px;\n        padding: 15px 0 0 0;\n        a {\n          font-weight: normal;\n          font-size: 18px;\n        }\n      }\n    }\n  }\n\n  .govuk-header__menu-button {\n    font-family: $font;\n    top: 0;\n    border-left: 1px solid #666;\n    padding: 20px 20px 16px 0;\n    font-size: 18px;\n    line-height: 12px;\n    font-weight: bold;\n    &:focus {\n      box-shadow: none;\n    }\n    &.govuk-js-header-toggle {\n      width: 100px;\n      height: 55px;\n      &.govuk-header__menu-button--open {\n        background: govuk-colour(\"white\");\n        border: none;\n        color: govuk-colour(\"black\");\n        padding-right: 0;\n        font-size: 34px;\n        font-weight: 100;\n        &::after {\n          display: none;\n        }\n      }\n    }\n\n    &#xpl-menu-button {\n      right: 60px;\n      &::after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        top: 24px;\n        bottom: 0;\n        right: 18px;\n        width: 7px;\n        height: 7px;\n        -webkit-transform: rotate(137deg);\n        -ms-transform: rotate(137deg);\n        transform: rotate(137deg);\n        border: solid;\n        border-width: 2px 2px 0 0;\n        border-color: white;\n        clip-path: none;\n        -webkit-clip-path: none;\n      }\n    }\n\n    &#xpl-search-button {\n      right: 0;\n      width: 60px;\n      cursor: pointer;\n      background-image: url(\"/public/images/magnifying-glass.png\");\n      background-repeat: no-repeat;\n      background-position: 11px 11px;\n      background-size: 35px auto;\n      text-indent: -5000px;\n      overflow: hidden;\n      &::after {\n        display: none;\n      }\n      &.govuk-header__menu-button--open {\n        background: white;\n        text-indent: 0;\n      }\n    }\n  }\n\n  .govuk-header__navigation-item {\n    border: none;\n    padding: 0 0 30px 0;\n    color: govuk-colour(\"black\");\n    a:link, a:visited {\n      font-size: 18px;\n      color: govuk-colour(\"white\");\n    }\n    button.xpl-search-button:focus {\n      outline: 3px solid #fd0;\n      outline-offset: 0;\n      box-shadow: inset 0 0 0 4px #0b0c0c;\n    }\n    .govuk-list &-2 {\n      padding-bottom: 28px;\n      a:link, a:visited {\n        color: govuk-colour(\"blue\");\n        font-size: 18px;\n      }\n    }\n    &.xpl-minor-nav-item {\n      margin-left: -25px;\n      margin-right: -25px;\n      padding-bottom: 0;\n      &:last-of-type {\n        padding-bottom: 60px;\n      }\n      a {\n        margin-left: 25px;\n        margin-right: 25px;\n      }\n    }\n    h2 {\n      margin: 30px 0 30px 0;\n      font-size: 22px;\n      font-weight: bold;\n    }\n    hr {\n      margin-left: -25px;\n      margin-right: -25px;\n      border-color: govuk-colour(\"black\");\n      border-width: 1px 0 0 0;\n    }\n  }\n  .govuk-header__container {\n    margin-bottom: 0;\n    border-bottom: none;\n    min-height: 40px;\n    z-index: 3;\n  }\n  nav {\n    background: govuk-colour(\"white\");\n    margin-left: -25px;\n    margin-right: -25px;\n    padding-left: 25px;\n    padding-right: 25px;\n\n    .govuk-js-header-toggle .arrow {\n      vertical-align: 4px;\n      font-weight: bold;\n      padding-left: 3px;\n    }\n\n    .govuk-js-search-toggle {\n      background-image: url(\"/assets/frontend/govuk_publishing_components/search-button-ca89b2a79f944909ceb7370d3f0b78811d32b96e883348fcd8886f63dd619585.png\");\n      background-position: 105% 50%;\n      background-size: 70px auto;\n      text-indent: -5000px;\n      right: -20px;\n      width: 50px;\n      height: 50px;\n      &.govuk-js-search-toggle--open {\n        background-color: govuk-colour(\"white\");\n        color: govuk-colour(\"black\");\n        text-indent: 0;\n      }\n    }\n  }\n\n  .xpl-menu__button {\n    font-family: $font;\n    background: none;\n    border: 0;\n    padding: 0;\n    font-size: 22px;\n    font-weight: bold;\n    color: $govuk-link-colour;\n    display: block;\n  }\n\n\n  .govuk-header__navigation, #xpl-search-box {\n    padding-top: 20px;\n    margin: 0 auto 0 auto;\n    max-width: 960px;\n  }\n\n  #xpl-search-box {\n    padding: 30px 0 60px 0;\n    h2 {\n      color: govuk-colour(\"black\");\n      margin: 0;\n      margin-bottom: 30px;\n    }\n    button {\n      background-color: govuk-colour(\"blue\");\n    }\n  }\n}\n\n// Very small width\n@include govuk-media-query ($until: $mobile-width) {\n  .explore-header {\n    svg {\n      width: 25px;\n      padding-top: 3px;\n    }\n    .govuk-header__logo {\n      padding: 0;\n      min-height: 39px;\n    }\n    .govuk-header__logotype-text {\n      font-size: 20px;\n    }\n    .govuk-header__container {\n      padding-left: 25px;\n      padding-top: 5px;\n    }\n    .govuk-header__menu-button {\n      top: -1px;\n      padding-left: 5px;\n      padding-right: 5px;\n      padding-top: 0;\n      padding-bottom: 0;\n    }\n    .govuk-header__menu-button#xpl-menu-button {\n      right: 45px;\n      width: 82px;\n      height: 45px;\n      padding-left: 12px;\n      font-size: 16px;\n      text-align: left;\n      &::after {\n        top: 20px;\n        right: 11px;\n        width: 5px;\n        height: 5px;\n      }\n    }\n    .govuk-header__menu-button--open#xpl-menu-button {\n      text-align: center;\n      font-size: 34px;\n      padding-left: 0;\n    }\n    .govuk-header__menu-button#xpl-search-button {\n      width: 45px;\n      height: 45px;\n      background-size: 25px auto;\n      background-position: 10px 10px;\n    }\n    .xpl-accordion__section-heading {\n      margin-right: 20px;\n    }\n  }\n}\n\n.explore-header .xpl-accordion__section-heading .xpl-accordion__section-button:focus {\n  margin-bottom: govuk-em(1px, 22px);\n}\n\n\n// Desktop\n\n@include govuk-media-query ($from: $desktop-width) {\n  .explore-header {\n    .govuk-header__container {\n      padding: 0 25px 0 25px;\n      margin-left: auto;\n      margin-right: auto;\n      max-width: 960px;\n      &--old-page {\n        padding: 0 30px 0 30px;\n      }\n    }\n\n    .govuk-header__logo {\n      width: 180px;\n      margin-top: 10px;\n    }\n    .govuk-header__content {\n      float: right;\n      width: 74.55%;\n    }\n    .xpl-nav--desktop {\n      display: block;\n      background: govuk-colour(\"black\");\n      border: none;\n      button {\n        color: govuk-colour(\"white\");\n        font-size: 16px;\n      }\n      .govuk-header__navigation {\n        min-height: unset;\n        position: absolute;\n        right: 25px;\n        padding-top: 0;\n      }\n      .govuk-header__navigation-item {\n        padding: 20px 30px 0 20px;\n        margin-right: 0;\n        cursor: pointer;\n        a:link, a:visited {\n          color: govuk-colour(\"white\");\n          font-size: 16px;\n        }\n        &--active {\n          a:link, a:visited {\n            color: $govuk-link-colour;\n          }\n        }\n        &#xpl-topics-menu-item, &#xpl-activity-menu-item {\n          button {\n            font-family: $font;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n            font-weight: 700;\n            font-size: 16px;\n            white-space: nowrap;\n            position: relative;\n            cursor: pointer;\n            &:focus {\n              outline: 3px solid transparent;\n              color: #0b0c0c;\n              background-color: #ffdd00;\n              box-shadow: 0 -2px #ffdd00, 0 4px #0b0c0c;\n              text-decoration: none;\n            }\n            &:after {\n              content: \"\";\n              display: block;\n              position: absolute;\n              top: 5px;\n              right: -24px;\n              width: 6px;\n              height: 6px;\n              -webkit-transform: rotate(137deg);\n              -ms-transform: rotate(137deg);\n              transform: rotate(137deg);\n              border: solid;\n              border-width: 2px 2px 0 0;\n              border-color: white;\n              clip-path: none;\n            }\n          }\n          &.menu-item-open {\n            button:after {\n              -webkit-transform: rotate(317deg);\n              -ms-transform: rotate(317deg);\n              transform: rotate(317deg);\n              border: solid;\n              border-width: 2px 2px 0 0;\n              border-color: black;\n              clip-path: none;\n              top: 7px;\n              cursor: pointer;\n            }\n          }\n        }\n        &#xpl-search-menu-item {\n          padding: 0;\n          vertical-align: top;\n          &.menu-item-open {\n            button {\n              height: 55px;\n              background: white;\n              background-image: url(\"/public/images/black-cross.png\");\n              background-size: 15px auto;\n              background-repeat: no-repeat;\n              background-position: 50% 50%;\n            }\n          }\n          button, a {\n            display: block;\n            position: static;\n            right: 0;\n            width: 54px;\n            height: 54px;\n            cursor: pointer;\n            background-image: url(\"/public/images/magnifying-glass.png\");\n            background-repeat: no-repeat;\n            background-position: 10px 11.2px;\n            background-size: 35px;\n            background-color: #1d70b8;\n            text-indent: -5000px;\n            overflow: hidden;\n          }\n        }\n      }\n\n      .xpl-frame2 {\n        position: absolute;\n        left: 50%;\n        right: 50%;\n        margin-left: -50vw;\n        margin-right: -50vw;\n        top: 55px;\n        z-index: 15;\n        width: 100vw;\n        background: govuk-colour(\"white\");\n\n        &-inner {\n          max-width: 960px;\n          margin: 40px auto 60px auto;\n          padding-left: 20px;\n          padding-right: 20px;\n\n          h2 {\n            font-size: 22px;\n          }\n\n          h2:first-of-type {\n            padding-top: 0;\n          }\n\n          li a {\n            text-decoration: underline;\n\n            &:link {\n              font-weight: bold;\n            }\n\n            &:hover,\n            &:focus {\n              margin-bottom: 5px;\n              text-decoration-thickness: 3px;\n              text-underline-offset: 0.15em;\n            }\n\n            &:focus {\n              border-bottom: 0;\n            }\n          }\n\n          .xpl-minor-item {\n            border-top: 1px solid $govuk-border-colour;\n            padding-top: 30px;\n          }\n          ul {\n            padding: 0;\n            margin: 0;\n            vertical-align: top;\n            li {\n              margin-bottom: 30px;\n              display: block;\n            }\n            li div, li p {\n              color: govuk-colour(\"black\");\n              font-size: 16px;\n              padding: 0;\n            }\n          }\n          .xpl-dropdown-intro {\n            color: black;\n            font-size: 22px;\n            vertical-align: top;\n          }\n        }\n        &#xpl-frame2-search {\n          a:link, a:visited {\n            font-size: 19px;\n          }\n          h2.govuk-heading-l {\n            padding-bottom: 30px;\n            margin-bottom: 0;\n          }\n          button.govuk-input__suffix:focus {\n            outline: 3px solid #fd0;\n            outline-offset: 0;\n            box-shadow: inset 0 0 0 4px #0b0c0c;\n          }\n        }\n      }\n    }\n    .xpl-backdrop {\n      position: absolute;\n      left: 50%;\n      right: 50%;\n      margin-left: -50vw;\n      margin-right: -50vw;\n      top: 58px;\n      width: 100vw;\n      height: 200vh;\n      background: black;\n      opacity: 0.8;\n    }\n    .xpl-nav {\n      display: none;\n    }\n    .govuk-header__navigation--open::after {\n      display: none;\n    }\n\n    $govuk-heavy-link-underline-thickness: 3px !default;\n    .govuk-header__navigation-item {\n      a {\n        &:link,\n        &:visited {\n          text-decoration: none;\n        }\n\n        &:hover {\n          text-decoration: underline;\n          text-decoration-thickness: 3px;\n        }\n      }\n      &:hover {\n        button {\n          text-decoration: none;\n          margin-bottom: $govuk-heavy-link-underline-thickness *-1;\n          border-bottom: 3px solid;\n        }\n      }\n      &.menu-item-open {\n        background-color: govuk-colour(\"white\");\n        padding-bottom: 20px;\n        color: $menu-hover-colour;\n        &:hover {\n          button {\n            text-decoration: none;\n          }\n          button:after {\n            border-color: black;\n          }\n        }\n        button {\n          cursor: pointer;\n          color: govuk-colour(\"black\");\n        }\n      }\n    }\n  }\n}\n\n\n// JS-specific styling\n\n.js-enabled .explore-header {\n  nav {\n    padding-left: 20px;\n    padding-right: 20px;\n    &.xpl-nav--desktop {\n      border: none;\n    }\n  }\n  .xpl-nav--desktop {\n    border: none;\n\n    .xpl-frame2 a:focus {\n      margin-bottom: govuk-em(6px, 18px);\n    }\n  }\n\n  // Add extra line spacing - using padding because of the accordion markup\n  .xpl-accordion__section-content p {\n    padding-top: 5px;\n  }\n\n  .xpl-nav--desktop .xpl-frame2 a:focus {\n    margin-bottom: 5px;\n  }\n}\n\n@include govuk-media-query ($from: $desktop-width) {\n  .js-enabled .explore-header {\n    .govuk-header__container {\n      .govuk-header__navigation-item {\n        a:link, a:visited, button#xpl-activity-button-desktop, button#xpl-topics-button-desktop {\n          font-size: 16px;\n        }\n        a:focus {\n          color: govuk-colour(\"black\");\n        }\n      }\n    }\n    .xpl-accordion__section-heading button:focus {\n      margin-bottom: govuk-em(1px, 22px);\n    }\n    .xpl-nav {\n      .govuk-header__navigation-item {\n        padding: 15px 0 15px 0;\n      }\n    }\n    .xpl-nav--desktop {\n      display: block;\n      .govuk-header__navigation {\n        padding-top: 0;\n        margin: unset auto;\n      }\n      .govuk-header__navigation-item {\n        &#xpl-topics-menu-item {\n          padding-right: 55px;\n        }\n        &#xpl-activity-menu-item {\n          padding-right: 45px;\n        }\n      }\n      .xpl-frame2 {\n        a {\n          &:link {\n            color: $govuk-link-colour;\n          }\n\n          &:focus {\n            color: #0b0c0c;\n          }\n        }\n      }\n    }\n  }\n}\n"],"file":"explore-header.css"} */
